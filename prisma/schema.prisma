// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

generator zod {
  provider               = "zod-prisma-types"
  createInputTypes       = false
  addIncludeType         = false
  addSelectType          = false
  addInputTypeValidation = false
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_URL")
  relationMode = "prisma"
}

model User {
  id String @id @default(cuid())

  username String @unique

  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String

  image    String?
  accounts Account[]
  sessions Session[]

  // Math learning app relations
  lessonsProgress UserLessonProgress[]
  problemAttempts UserProblemAttempt[]
  streak          UserStreak?
  profile         UserProfile?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@index([userId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Math learning app models

model Lesson {
  id          String    @id @default(cuid())
  title       String
  description String?
  order       Int       @unique
  problems    Problem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  UserLessonProgress UserLessonProgress[]
}

model Problem {
  id       String      @id @default(cuid())
  lessonId String
  lesson   Lesson      @relation(fields: [lessonId], references: [id])
  type     ProblemType
  question String
  options  String[] // For multiple choice options
  answer   String // Correct answer (for multiple choice, this will match one of the options)
  order    Int

  attempts UserProblemAttempt[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([lessonId])
}

enum ProblemType {
  MULTIPLE_CHOICE
  INPUT
}

model UserLessonProgress {
  id         String  @id @default(cuid())
  userId     String
  user       User    @relation(fields: [userId], references: [id])
  lessonId   String
  lesson     Lesson  @relation(fields: [lessonId], references: [id])
  completed  Boolean @default(false)
  percentage Float   @default(0) // Progress percentage within the lesson

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, lessonId])
  @@index([userId])
  @@index([lessonId])
}

model UserProblemAttempt {
  id        String  @id @default(cuid())
  userId    String
  user      User    @relation(fields: [userId], references: [id])
  problemId String
  problem   Problem @relation(fields: [problemId], references: [id])
  attemptId String // For idempotency - unique identifier for this attempt
  answer    String // User's answer
  isCorrect Boolean
  xpEarned  Int     @default(10) // XP per correct answer

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([attemptId]) // Ensures idempotency
  @@index([userId])
  @@index([problemId])
  @@index([createdAt])
}

model UserStreak {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  currentStreak Int      @default(0)
  longestStreak Int      @default(0)
  lastActive    DateTime // Last UTC day the user completed a problem

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId])
}

model UserProfile {
  id       String @id @default(cuid())
  userId   String
  user     User   @relation(fields: [userId], references: [id])
  totalXP  Int    @default(0)
  progress Float  @default(0) // Overall progress percentage

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId])
}
