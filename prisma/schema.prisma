// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

generator zod {
  provider               = "zod-prisma-types"
  createInputTypes       = false
  addIncludeType         = false
  addSelectType          = false
  addInputTypeValidation = false
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_URL")
  relationMode = "prisma"
}

model User {
  id String @id @default(cuid())

  username String @unique

  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String

  image    String?
  accounts Account[]
  sessions Session[]

  // Math learning app relations
  lessonsProgress     UserLessonProgress[]
  problemAttempts     UserProblemAttempt[]
  streak              UserStreak?
  profile             UserProfile?
  temporaryAnswers    TemporaryAnswer[]
  xpTransactions      UserXP[]              // New XP transactions relation

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@index([userId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Math learning app models

model Lesson {
  id          String   @id @default(cuid())
  title       String
  description String?
  order       Int      @unique
  problems    Problem[]
  userProgress UserLessonProgress[]
  temporaryAnswers TemporaryAnswer[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Problem {
  id          String   @id @default(cuid())
  lessonId    String
  lesson      Lesson   @relation(fields: [lessonId], references: [id])
  type        ProblemType
  question    String
  answer      String   // Correct answer (for multiple choice, this will match one of the options)
  order       Int

  // Relations
  options     ProblemOption[]  // For multiple choice options
  attempts    UserProblemAttempt[]
  temporaryAnswers TemporaryAnswer[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([lessonId])
}

model ProblemOption {
  id       String @id @default(cuid())
  problemId String
  problem  Problem @relation(fields: [problemId], references: [id])
  text     String
  order    Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([problemId])
  @@index([order])
}

enum ProblemType {
  MULTIPLE_CHOICE
  INPUT
}

model UserLessonProgress {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  lessonId   String
  lesson     Lesson   @relation(fields: [lessonId], references: [id])
  completed  Boolean  @default(false)
  percentage Float    @default(0) // Progress percentage within the lesson

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, lessonId])
  @@index([userId])
  @@index([lessonId])
}

model UserProblemAttempt {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  problemId    String
  problem      Problem  @relation(fields: [problemId], references: [id])
  attemptId    String   // For idempotency - unique identifier for this attempt
  answer       String   // User's answer
  isCorrect    Boolean
  xpEarned     Int      @default(10) // XP per correct answer
  
  // Relation to XP entry for this attempt
  // xpEntry      UserXP?  @relation(name: "UserProblemAttemptXP")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([attemptId]) // Ensures idempotency
  @@unique([userId, problemId]) // Ensures one attempt per user per problem
  @@index([userId])
  @@index([problemId])
  @@index([createdAt])
}

model UserStreak {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  currentStreak Int      @default(0)
  longestStreak Int      @default(0)
  lastActive    DateTime // Last UTC day the user completed a problem

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId])
}

model UserXP {
  id               String   @id @default(cuid())
  userId           String
  user             User     @relation(fields: [userId], references: [id])
  amount           Int
  sourceType       XPSourceType
  sourceId         String   // ID of the source entity (e.g., UserProblemAttempt ID)
  description      String   // Description of how XP was earned
  category         XPCategory

  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@index([userId])
  @@index([sourceType, sourceId])
  @@index([createdAt])
}

model UserProfile {
  id               String   @id @default(cuid())
  userId           String
  user             User     @relation(fields: [userId], references: [id])
  totalXP          Int      @default(0) // Total XP earned by the user
  progress         Float    @default(0) // Overall progress percentage

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId])
}

enum XPSourceType {
  USER_PROBLEM_ATTEMPT
  MANUAL_ADJUSTMENT
  SPECIAL_ACHIEVEMENT
  DAILY_STREAK
}

enum XPCategory {
  CORRECT_ANSWER
  STREAK_BONUS
  ACHIEVEMENT
  MANUAL
}

model TemporaryAnswer {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  problemId  String
  problem    Problem  @relation(fields: [problemId], references: [id])
  lessonId   String
  lesson     Lesson   @relation(fields: [lessonId], references: [id])
  answer     String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, problemId])
  @@index([userId])
  @@index([problemId])
  @@index([lessonId])
}
